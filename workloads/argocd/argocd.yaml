# Source: argo-cd/templates/argocd-application-controller/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-application-controller
  labels:
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
automountServiceAccountToken: true
---
# Source: argo-cd/templates/argocd-server/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-server
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
automountServiceAccountToken: true
---
# Source: argo-cd/templates/dex/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-dex-server
  labels:
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
automountServiceAccountToken: true
---
# Source: argo-cd/templates/argocd-configs/argocd-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: argocd-secret
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-secret
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
type: Opaque
---
# Source: argo-cd/templates/argocd-configs/argocd-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
data:
  application.instanceLabelKey: argocd.argoproj.io/instance
  url: https://argocd.example.com
---
# Source: argo-cd/templates/argocd-configs/argocd-gpg-keys-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-gpg-keys-cm
  labels:
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-gpg-keys-cm
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
---
# Source: argo-cd/templates/argocd-configs/argocd-rbac-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-rbac-cm
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-rbac-cm
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
---
# Source: argo-cd/templates/argocd-configs/argocd-ssh-known-hosts-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-ssh-known-hosts-cm
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-ssh-known-hosts-cm
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
data:
  ssh_known_hosts: |
    bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
    github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
    github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
    github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
    gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
    gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
    gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
    ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
    vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
---
# Source: argo-cd/templates/argocd-configs/argocd-tls-certs-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-tls-certs-cm
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-tls-certs-cm
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
---
# Source: argo-cd/templates/argocd-application-controller/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-argocd-application-controller
  labels:
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
rules:
- resources:
  - '*'
  apiGroups:
  - '*'
  verbs:
  - '*'
- nonResourceURLs:
  - '*'
  verbs:
  - '*'
---
# Source: argo-cd/templates/argocd-server/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-argocd-server
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
rules:
- resources:
  - '*'
  apiGroups:
  - '*'
  verbs:
  - delete
  - get
  - patch
- resources:
  - events
  apiGroups:
  - ""
  verbs:
  - list
- resources:
  - pods
  - pods/log
  apiGroups:
  - ""
  verbs:
  - get
---
# Source: argo-cd/templates/argocd-application-controller/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-argocd-application-controller
  labels:
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
roleRef:
  name: argo-argocd-application-controller
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: argocd-application-controller
  namespace: default
  kind: ServiceAccount
---
# Source: argo-cd/templates/argocd-server/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-argocd-server
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
roleRef:
  name: argo-argocd-server
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: argocd-server
  namespace: default
  kind: ServiceAccount
---
# Source: argo-cd/templates/argocd-application-controller/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-argocd-application-controller
  labels:
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
rules:
- resources:
  - secrets
  - configmaps
  apiGroups:
  - ""
  verbs:
  - get
  - list
  - watch
- resources:
  - applications
  - appprojects
  apiGroups:
  - argoproj.io
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- resources:
  - events
  apiGroups:
  - ""
  verbs:
  - create
  - list
---
# Source: argo-cd/templates/argocd-server/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-argocd-server
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
rules:
- resources:
  - secrets
  - configmaps
  apiGroups:
  - ""
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- resources:
  - applications
  - appprojects
  apiGroups:
  - argoproj.io
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - delete
  - patch
- resources:
  - events
  apiGroups:
  - ""
  verbs:
  - create
  - list
---
# Source: argo-cd/templates/dex/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-argocd-dex-server
  labels:
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
rules:
- resources:
  - secrets
  - configmaps
  apiGroups:
  - ""
  verbs:
  - get
  - list
  - watch
---
# Source: argo-cd/templates/argocd-application-controller/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-argocd-application-controller
  labels:
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
roleRef:
  name: argo-argocd-application-controller
  kind: Role
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: argocd-application-controller
  namespace: default
  kind: ServiceAccount
---
# Source: argo-cd/templates/argocd-server/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-argocd-server
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
roleRef:
  name: argo-argocd-server
  kind: Role
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: argocd-server
  namespace: default
  kind: ServiceAccount
---
# Source: argo-cd/templates/dex/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-argocd-dex-server
  labels:
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
roleRef:
  name: argo-argocd-dex-server
  kind: Role
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: argocd-dex-server
  namespace: default
  kind: ServiceAccount
---
# Source: argo-cd/templates/argocd-application-controller/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: argo-argocd-application-controller
  labels:
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
spec:
  selector:
    app.kubernetes.io/instance: argo
    app.kubernetes.io/name: argocd-application-controller
  ports:
  - name: https-controller
    port: 8082
    targetPort: 8082
---
# Source: argo-cd/templates/argocd-repo-server/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: argo-argocd-repo-server
  labels:
    app.kubernetes.io/component: repo-server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-repo-server
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
spec:
  selector:
    app.kubernetes.io/instance: argo
    app.kubernetes.io/name: argocd-repo-server
  ports:
  - name: https-repo-server
    protocol: TCP
    port: 8081
    targetPort: repo-server
---
# Source: argo-cd/templates/argocd-server/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: argo-argocd-server
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/instance: argo
    app.kubernetes.io/name: argocd-server
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: server
  - name: https
    protocol: TCP
    port: 443
    targetPort: server
---
# Source: argo-cd/templates/dex/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: argo-argocd-dex-server
  labels:
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
spec:
  selector:
    app.kubernetes.io/instance: argo
    app.kubernetes.io/name: argocd-dex-server
  ports:
  - name: http
    protocol: TCP
    port: 5556
    targetPort: http
  - name: grpc
    protocol: TCP
    port: 5557
    targetPort: grpc
---
# Source: argo-cd/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: argo-argocd-redis
  labels:
    app.kubernetes.io/component: redis
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-redis
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-3.29.5
spec:
  selector:
    app.kubernetes.io/instance: argo
    app.kubernetes.io/name: argocd-redis
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
---
# Source: argo-cd/templates/argocd-application-controller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-argocd-application-controller
  labels:
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: "v2.2.2"
    helm.sh/chart: argo-cd-3.29.5
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: argo
      app.kubernetes.io/name: argocd-application-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/component: application-controller
        app.kubernetes.io/instance: argo
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: argocd-application-controller
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: "v2.2.2"
        helm.sh/chart: argo-cd-3.29.5
    spec:
      serviceAccountName: argocd-application-controller
      containers:
      - name: application-controller
        image: quay.io/argoproj/argocd:v2.2.2
        command:
        - argocd-application-controller
        - --status-processors
        - "20"
        - --operation-processors
        - "10"
        - --app-resync
        - "180"
        - --self-heal-timeout-seconds
        - "5"
        - --repo-server
        - argo-argocd-repo-server:8081
        - --repo-server-timeout-seconds
        - "60"
        - --logformat
        - text
        - --loglevel
        - info
        - --redis
        - argo-argocd-redis:6379
        workingDir: /home/argocd
        ports:
        - name: controller
          protocol: TCP
          containerPort: 8082
        resources: {}
        volumeMounts:
        - name: argocd-home
          mountPath: /home/argocd
        - name: argocd-repo-server-tls
          mountPath: /app/config/controller/tls
        livenessProbe:
          failureThreshold: 3
          httpGet:
            port: 8082
            path: /healthz
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 8082
          timeoutSeconds: 1
        imagePullPolicy: IfNotPresent
      volumes:
      - name: argocd-home
        emptyDir: {}
      - name: argocd-repo-server-tls
        secret:
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
          optional: true
          secretName: argocd-repo-server-tls
  revisionHistoryLimit: 5
---
# Source: argo-cd/templates/argocd-repo-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-argocd-repo-server
  labels:
    app.kubernetes.io/component: repo-server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-repo-server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: "v2.2.2"
    helm.sh/chart: argo-cd-3.29.5
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: argo
      app.kubernetes.io/name: argocd-repo-server
  template:
    metadata:
      labels:
        app.kubernetes.io/component: repo-server
        app.kubernetes.io/instance: argo
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: argocd-repo-server
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: "v2.2.2"
        helm.sh/chart: argo-cd-3.29.5
    spec:
      serviceAccountName: default
      initContainers:
      - name: copyutil
        image: quay.io/argoproj/argocd:v2.2.2
        command:
        - cp
        - -n
        - /usr/local/bin/argocd
        - /var/run/argocd/argocd-cmp-server
        volumeMounts:
        - name: var-files
          mountPath: /var/run/argocd
      containers:
      - name: repo-server
        image: quay.io/argoproj/argocd:v2.2.2
        args:
        - argocd-repo-server
        - --redis
        - argo-argocd-redis:6379
        - --logformat
        - text
        - --loglevel
        - info
        ports:
        - name: repo-server
          protocol: TCP
          containerPort: 8081
        resources: {}
        volumeMounts:
        - name: gpg-keys
          mountPath: /app/config/gpg/source
        - name: gpg-keyring
          mountPath: /app/config/gpg/keys
        - name: ssh-known-hosts
          mountPath: /app/config/ssh
        - name: argocd-repo-server-tls
          mountPath: /app/config/reposerver/tls
        - name: tmp-dir
          mountPath: /tmp
        - name: plugins
          mountPath: /home/argocd/cmp-server/plugins
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 8081
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 8081
          timeoutSeconds: 1
        imagePullPolicy: IfNotPresent
      volumes:
      - name: gpg-keys
        configMap:
          name: argocd-gpg-keys-cm
      - name: gpg-keyring
        emptyDir: {}
      - name: ssh-known-hosts
        configMap:
          name: argocd-ssh-known-hosts-cm
      - name: argocd-repo-server-tls
        secret:
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
          optional: true
          secretName: argocd-repo-server-tls
      - name: tmp-dir
        emptyDir: {}
      - name: var-files
        emptyDir: {}
      - name: plugins
        emptyDir: {}
  revisionHistoryLimit: 5
---
# Source: argo-cd/templates/argocd-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-argocd-server
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: "v2.2.2"
    helm.sh/chart: argo-cd-3.29.5
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: argo
      app.kubernetes.io/name: argocd-server
  template:
    metadata:
      labels:
        app.kubernetes.io/component: server
        app.kubernetes.io/instance: argo
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: argocd-server
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: "v2.2.2"
        helm.sh/chart: argo-cd-3.29.5
    spec:
      serviceAccountName: argocd-server
      containers:
      - name: server
        image: quay.io/argoproj/argocd:v2.2.2
        command:
        - argocd-server
        - --staticassets
        - /shared/app
        - --repo-server
        - argo-argocd-repo-server:8081
        - --dex-server
        - http://argo-argocd-dex-server:5556
        - --logformat
        - text
        - --loglevel
        - info
        - --redis
        - argo-argocd-redis:6379
        ports:
        - name: server
          protocol: TCP
          containerPort: 8080
        resources: {}
        volumeMounts:
        - name: ssh-known-hosts
          mountPath: /app/config/ssh
        - name: argocd-repo-server-tls
          mountPath: /app/config/server/tls
        - name: plugins-home
          mountPath: /home/argocd
        - name: tmp-dir
          mountPath: /tmp
        livenessProbe:
          failureThreshold: 3
          httpGet:
            port: 8080
            path: /healthz
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            port: 8080
            path: /healthz
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        imagePullPolicy: IfNotPresent
      volumes:
      - name: static-files
        emptyDir: {}
      - name: tmp-dir
        emptyDir: {}
      - name: ssh-known-hosts
        configMap:
          name: argocd-ssh-known-hosts-cm
      - name: argocd-repo-server-tls
        secret:
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
          optional: true
          secretName: argocd-repo-server-tls
      - name: plugins-home
        emptyDir: {}
  revisionHistoryLimit: 5
---
# Source: argo-cd/templates/dex/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-argocd-dex-server
  labels:
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: "v2.30.0"
    helm.sh/chart: argo-cd-3.29.5
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: argo
      app.kubernetes.io/name: argocd-dex-server
  template:
    metadata:
      labels:
        app.kubernetes.io/component: dex-server
        app.kubernetes.io/instance: argo
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: argocd-dex-server
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: "v2.30.0"
        helm.sh/chart: argo-cd-3.29.5
    spec:
      serviceAccountName: argocd-dex-server
      initContainers:
      - name: copyutil
        image: quay.io/argoproj/argocd:v2.2.2
        command:
        - cp
        - -n
        - /usr/local/bin/argocd
        - /shared/argocd-dex
        resources: {}
        volumeMounts:
        - name: static-files
          mountPath: /shared
        imagePullPolicy: IfNotPresent
      containers:
      - name: dex-server
        image: ghcr.io/dexidp/dex:v2.30.0
        command:
        - /shared/argocd-dex
        - rundex
        ports:
        - name: http
          protocol: TCP
          containerPort: 5556
        - name: grpc
          protocol: TCP
          containerPort: 5557
        - name: metrics
          protocol: TCP
          containerPort: 5558
        resources: {}
        volumeMounts:
        - name: tmp-dir
          mountPath: /tmp
        - name: static-files
          mountPath: /shared
        imagePullPolicy: IfNotPresent
      volumes:
      - name: tmp-dir
        emptyDir: {}
      - name: static-files
        emptyDir: {}
---
# Source: argo-cd/templates/redis/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-argocd-redis
  labels:
    app.kubernetes.io/component: redis
    app.kubernetes.io/instance: argo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-redis
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: "6.2.4-alpine"
    helm.sh/chart: argo-cd-3.29.5
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-redis
  template:
    metadata:
      labels:
        app.kubernetes.io/component: redis
        app.kubernetes.io/instance: argo
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: argocd-redis
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: "6.2.4-alpine"
        helm.sh/chart: argo-cd-3.29.5
    spec:
      serviceAccountName: default
      automountServiceAccountToken: false
      containers:
      - name: argo-argocd-redis
        image: redis:6.2.4-alpine
        args:
        - --save
        - ""
        - --appendonly
        - "no"
        ports:
        - name: redis
          containerPort: 6379
        resources: {}
        imagePullPolicy: IfNotPresent
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
